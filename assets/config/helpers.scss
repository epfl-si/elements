@charset 'utf-8';

// Responsive sr-only
@each $breakpoint in map-keys($grid-breakpoints) {
  .sr-only-#{$breakpoint} {
    @include media-breakpoint-up($breakpoint) {
      @include sr-only();
    }
  }
}

// Intro.js
.introjs-tooltip {
  min-width: 500px !important;
  max-width: 60% !important;
}
.introjs-helperNumberLayer { background: theme-color('primary') !important; }

.focused {
  position: relative;

  &:before {
    content: ' ';
    position: absolute;
    top: -5px;
    right: -5px;
    bottom: -5px;
    left: -5px;
    border: 1px solid transparent;
    border-radius: 4px;
    transform: scale(1);
    transition:
      transform 0.1s ease,
      border-color 0.3s;
  }

  &:focus,
  &.focus {
    box-shadow: none !important;
    outline: none !important;

    &:before {
      transform: scale(1);
      border-color: $red;
    }
  }

  &:active {
    &:before {
      content: none;
    }
  }
}

// Display helpers
.flex-grow {
  flex: 1 1 auto;
}

// Layout helpers
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .offset#{$infix}-top { margin-top: $spacer * -4; }
  }
}

.overflow-hidden {
  overflow: hidden;
}

// Text helpers
.text-small {
  font-size: $font-size-xs;
}

.text-xs {
  font-size: $legacy-font-size-xs;
}

.text-sm {
  font-size: $legacy-font-size-sm;
}

.text-base {
  font-size: $legacy-font-size-base;
}

.text-lg {
  font-size: $legacy-font-size-lg;
}

.text-xl {
  font-size: $legacy-font-size-xl;
}

.text-arrow {
  display: flex;
  justify-content: space-between;

  &:after {
    content: str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'%3E%3Cpath fill='#{$text-muted}' d='M11.586 7L6.293 1.707 7.707.293 15.414 8l-7.707 7.707-1.414-1.414L11.586 9H0V7h11.586z'/%3E%3C/svg%3E"), "#", "%23");
    display: block;
    margin-left: auto;
    opacity: 0.6;
    transition: opacity 0.2s;
  }

  a:hover & {
    &:after {
      opacity: 1;
    }
  }
}

.text-padded {
  background-color: $white;
  box-shadow: 0.444rem 0 0 $white, -0.444rem 0 0 $white; // Around 8px
  box-decoration-break: clone;
}

.text-spread {
  letter-spacing: 3px;
}

/*
  Text Decoration

  Bootstrap v5 + legacy
*/
.underline, .text-decoration-underline {
  text-decoration: underline;
}

.overline, .text-decoration-overline {
  text-decoration: overline;
}

.line-through, .text-decoration-line-through {
  text-decoration: line-through;
}

// .text-decoration-none already exists in v4
.no-underline {
  text-decoration: none;
}

/*
  Triangles
*/
.triangle-outer-bottom-right {
  position: relative;
}

.triangle-outer-bottom-right:after {
  content: '';
  display: block;
  position: absolute;
  bottom: -0.24rem;
  left: -1.3rem;
  border-left: 1rem solid transparent;
  border-top: 1rem solid $red;
  border-right: 1rem solid transparent;
  width: 0;
  height: 0;
  transform: rotate(-45deg);
  transition: background 0.15s;
}

.triangle-outer-top-right:after {
  content: '';
  display: block;
  position: absolute;
  top: 0.479rem;
  left: -1.3rem;
  border-left: 1rem solid transparent;
  border-top: 1rem solid $red;
  border-right: 1rem solid transparent;
  width: 0;
  height: 0;
  transform: rotate(-45deg);
  transition: background 0.15s;
}

// Gray background helpers.
@each $key, $value in $grays {
  @include bg-variant(".bg-gray-#{$key}", $value);
}

// Separator
hr {
  width: 100%;
}

// generate all bg-gray helpers
@each $key, $value in $grays {
  .text-gray-#{$key} {
    color: $value !important;
  }
}

// generate all opacity helpers
@each $key, $value in $opacities {
  .opacity-#{$key} {
    opacity: $value;
  }
}
