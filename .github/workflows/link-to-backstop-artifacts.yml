name: Link to Backstop artifacts
# Add a comment in the PR thread with a link to the Backstop .zip file
# containing the ‚Äúvisual diff‚Äù between main and PR branches. Bounce
# the links off the https://nightly.link/ service, so as to get around
# GitHub's silly restrictions regarding time limits and/or
# authentication checks on build artifact URLs.
on:
  workflow_run:
    workflows:
      - 'Backstop.js regression testing'
    types:
      - completed
jobs:
  link_to_Backstop_artifacts_in_PR_comment:
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          # This snippet is public-domain, adapted from
          # https://github.com/oprypin/nightly.link/blob/master/.github/workflows/pr-comment.yml
          script: |
            async function upsertComment(owner, repo, issue_number, purpose, body) {
              const {data: comments} = await github.rest.issues.listComments(
                {owner, repo, issue_number});

              const marker = `<!-- bot: ${purpose} -->`;
              body = marker + "\n" + body;

              const existing = comments.filter((c) => c.body.includes(marker));
              if (existing.length > 0) {
                const last = existing[existing.length - 1];
                core.info(`Updating comment ${last.id}`);
                await github.rest.issues.updateComment({
                  owner, repo,
                  body,
                  comment_id: last.id,
                });
              } else {
                core.info(`Creating a comment in issue / PR #${issue_number}`);
                await github.rest.issues.createComment({issue_number, body, owner, repo});
              }
            }

            const {owner, repo} = context.repo;
            const run_id = ${{github.event.workflow_run.id}};

            const pull_requests = ${{ toJSON(github.event.workflow_run.pull_requests) }};
            if (!pull_requests.length) {
              return core.error("This workflow doesn't match any pull requests!");
            }

            const artifacts = await github.paginate(
              github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id});
            if (!artifacts.length) {
              return core.error(`No artifacts found`);
            }
            let body = `üîé Download the Backstop report for this pull request (link valid for 90 days):\n`;
            for (const art of artifacts) {
              body += `\n* [${art.name}.zip](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
            }

            core.info("Review thread message body:", body);

            for (const pr of pull_requests) {
              await upsertComment(owner, repo, pr.number,
                "download-backstop", body);
            }
